네트워크 프로그래밍
장치 구성
	라우터
	-외부망을 사용시 다른 주소로 연결시켜 줌.
	스위치 
	-같은 네트워크 안에 있는지 IP주소로 확인
	-내부 망일 경우 굳이 라우터까지 통신을 할 필요가 없음.
	-해당 주소로 패킷을 보내줌.
	단말기(PC,스마트폰)

TCP/IP 모델 <- OSI 7Layer개념에서 진화함.
Application Layer : 유저 인터페이스,Http,FTP등 준비하는 단계



Transport Layer : 전송을 어떻게하고, 오류를 어떻게 처리 할지 TCP(패킷을 받았는지 안받았는지 재차 확인-MMO에서 주로 사용),UDP(연결 실패시 아무런 처리x-FPS장를에서 많이 사용)


Network Layer : 네트워크 간 경로 설정/라우터와 관련 있음.

DataLink Layer : 네트워크 내 경로 설정, 이더넷, PPP 스위치 장치와 관련 있음.

Physical Layer : 물리적인 신호처리, 케이블/허브장치

7계층 주소: 도메인주소(예 www.naver.com)
3계층 주소(IP/라우터)
2계층 주소(MAC/스위치)
네트워크 통신에서는 여러 변환으로 인해 실제 보내려 하는 크기와 다르다.

소켓프로그래밍
1)클라이언트 관점
- 소켓 준비
- 서버주소 Connect
소켓을 통해 Session 소켓과 패킷 송수신 가능

2)서버의 관점
-Listener 소켓준비
-Bind(서버주소/Port를 소켓에 연동)
-Listen
-Accept
클라 세션을 통해 대상과 연결가능

DNS(Domain Name System)
IP는 변경이될 수 있기에 Domain을 사용해 저장한다.

게임서버에서 I/O함수는 전부 Non_Blcoking계열로 만들어 줘야 한다.
패킷을 한번에 많이 모아서 보내줘야하는데, 컨텐츠에서 모을지, 서버에서 모을지는 프로젝트별로 나누어진다.
전체적으로 만든 후 방어코드를 만들어 줘야한다.

Connecter : 블록킹을 없애주는 리스너의 반대개념
- 서버에 컨텐츠를 올릴 때 서버를 한개로 할지 여러개로 할지(AI용 서버, 컨텐츠용 서버)
- 서버끼리 통신할때 필요

패킷
-서버<->클라이언트 간 통신규약같은 것.
-TCP프로토콜에서는 보내는측의 데이터량이랑 받는 측의 데이터량이 다르다.

TCP프로토콜이란? ->타 서버에 데이터가 완전히 들어가게 만들어야함.
-Transport Layer에 속함.
-실시간 연결(연결형 서비스), 전송 순서를 보장한다.
-데이터 손실이 일어나면 다시 전송
-받을 상황이 아니면 일부만 보냄(흐름/혼잡 제어)
-속도가 느림(UDP에 비해 느리다는 것이다.)
vs UDP -> 도착을 하든 안하든 상관없게 만들어야함.
-연결이 되지 않음(비연결형 서비스), 전송 순서에 대해 보장되지 않음
-분실에 대해 책임이 없음.(실제 만들 때는 분실고려를 해야함)
-일단 보내고 생각함.
-단순하므로 속도가 빠름.